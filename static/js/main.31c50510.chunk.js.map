{"version":3,"sources":["components/Map.js","components/LocalCash.js","App.js","serviceWorker.js","index.js"],"names":["Map","props","moveTimeout","state","loading","shops","onBoundsChanged","bound","console","log","clearTimeout","setTimeout","_min","_max","fromLat","_lat","fromLng","_lng","toLat","toLng","loadShops","setState","url","process","axios","get","then","r","data","debounce","this","map","getBounds","naverRef","mapDivId","style","width","height","defaultCenter","lat","lng","shop","key","id","position","onClick","alert","name","React","Component","useStyles","makeStyles","theme","root","display","drawer","breakpoints","up","flexShrink","appBar","marginLeft","menuButton","marginRight","spacing","searchInput","toolbar","mixins","drawerPaper","content","flexGrow","padding","LocalCash","classes","useTheme","useState","mobileOpen","setMobileOpen","handleDrawerToggle","className","TextField","label","Button","variant","color","button","startIcon","Divider","List","CssBaseline","AppBar","Toolbar","IconButton","aria-label","edge","Typography","noWrap","Hidden","smUp","implementation","Drawer","anchor","direction","open","onClose","paper","ModalProps","keepMounted","xsDown","ncpClientId","error","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.31c50510.chunk.js","sourcesContent":["import React from 'react';\r\nimport { NaverMap, Marker } from 'react-naver-maps';\r\nimport axios from 'axios';\r\nimport { debounce } from 'lodash';\r\n\r\nclass Map extends React.Component {\r\n\r\n  moveTimeout = null;\r\n\r\n  state = {\r\n    loading: false,\r\n    shops: []\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.onBoundsChanged = debounce(this.onBoundsChanged, 500);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.onBoundsChanged(this.map.getBounds())\r\n  }\r\n\r\n  onBoundsChanged = (bound) => {\r\n    console.log(bound);\r\n    if (this.moveTimeout) {\r\n      clearTimeout(this.moveTimeout);\r\n    }\r\n\r\n    this.moveTimeout = setTimeout(() => {\r\n      this.moveTimeout = null;\r\n\r\n      const { _min, _max } = bound;\r\n      const { _lat: fromLat, _lng: fromLng } = _min;\r\n      const { _lat: toLat, _lng: toLng } = _max;\r\n      this.loadShops(fromLat, fromLng, toLat, toLng);\r\n    }, 500);\r\n  }\r\n\r\n\r\n  loadShops = (fromLat, fromLng, toLat, toLng) => {\r\n    this.setState({\r\n      loading: true\r\n    })\r\n\r\n    const url = `${process.env.REACT_APP_API_HOST}/shops?from_lat=${fromLat}&from_lng=${fromLng}&to_lat=${toLat}&to_lng=${toLng}`;\r\n    console.log(url);\r\n\r\n    axios.get(url)\r\n      .then(r => {\r\n        console.log(r.data);\r\n        this.setState({\r\n          loading: false,\r\n          shops: r.data\r\n        })\r\n      })\r\n  }\r\n\r\n  render() {\r\n    const { loading, shops } = this.state;\r\n\r\n    // const navermaps = window.naver.maps;\r\n\r\n    return (\r\n      <div>\r\n        <NaverMap\r\n          naverRef={r => this.map = r}\r\n          mapDivId={\"localcash-map\"}\r\n          style={{\r\n            width: '100%',\r\n            height: '600px'\r\n          }}\r\n          defaultCenter={{ lat: 37.433, lng: 127.15 }}\r\n          onBoundsChanged={this.onBoundsChanged}\r\n        >\r\n          {shops.map(shop => (\r\n            <Marker\r\n              key={shop.id}\r\n              position={{ lat: shop.lat, lng: shop.lng }}\r\n              onClick={() => alert(shop.name)} />\r\n          ))}\r\n        </NaverMap>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Map;","import React from 'react';\r\nimport { RenderAfterNavermapsLoaded } from 'react-naver-maps';\r\nimport Map from './Map';\r\n\r\nimport PropTypes from 'prop-types';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport Hidden from '@material-ui/core/Hidden';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MailIcon from '@material-ui/icons/Mail';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Search from '@material-ui/icons/Search';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  drawer: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: drawerWidth,\r\n      flexShrink: 0,\r\n    },\r\n  },\r\n  appBar: {\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: `calc(100% - ${drawerWidth}px)`,\r\n      marginLeft: drawerWidth,\r\n    },\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    [theme.breakpoints.up('sm')]: {\r\n      display: 'none',\r\n    },\r\n  },\r\n  searchInput: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  // necessary for content to be below app bar\r\n  toolbar: theme.mixins.toolbar,\r\n  drawerPaper: {\r\n    width: drawerWidth,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(3),\r\n  },\r\n}));\r\n\r\n\r\nfunction LocalCash(props) {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [mobileOpen, setMobileOpen] = React.useState(false);\r\n\r\n  const handleDrawerToggle = () => {\r\n    setMobileOpen(!mobileOpen);\r\n  };\r\n\r\n  const drawer = (\r\n    <div>\r\n      <div className={classes.toolbar} />\r\n      <TextField label=\"검색\" />\r\n      <Button\r\n        variant=\"contained\"\r\n        color=\"primary\"\r\n        className={classes.button}\r\n        startIcon={<Search />}\r\n      >{\"검색\"}</Button>\r\n      <Divider />\r\n      <List>\r\n\r\n      </List>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <CssBaseline />\r\n      <AppBar position=\"fixed\" className={classes.appBar}>\r\n        <Toolbar>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            edge=\"start\"\r\n            onClick={handleDrawerToggle}\r\n            className={classes.menuButton}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          <Typography variant=\"h6\" noWrap>\r\n            {\"경기도 지역화폐 가맹점\"}\r\n          </Typography>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <nav className={classes.drawer} aria-label=\"mailbox folders\">\r\n        {/* The implementation can be swapped with js to avoid SEO duplication of links. */}\r\n        <Hidden smUp implementation=\"css\">\r\n          <Drawer\r\n            // container={container}\r\n            variant=\"temporary\"\r\n            anchor={theme.direction === 'rtl' ? 'right' : 'left'}\r\n            open={mobileOpen}\r\n            onClose={handleDrawerToggle}\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            ModalProps={{\r\n              keepMounted: true, // Better open performance on mobile.\r\n            }}\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n        <Hidden xsDown implementation=\"css\">\r\n          <Drawer\r\n            classes={{\r\n              paper: classes.drawerPaper,\r\n            }}\r\n            variant=\"permanent\"\r\n            open\r\n          >\r\n            {drawer}\r\n          </Drawer>\r\n        </Hidden>\r\n      </nav>\r\n      <main className={classes.content}>\r\n        <div className={classes.toolbar} />\r\n        <RenderAfterNavermapsLoaded\r\n          ncpClientId={process.env.REACT_APP_NAVER_CLIENT_ID}\r\n          error={<p>Maps Load Error</p>}\r\n          loading={<p>Loading...</p>}>\r\n          <Map />\r\n        </RenderAfterNavermapsLoaded>\r\n      </main>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default LocalCash;","import React from 'react';\r\nimport LocalCash from './components/LocalCash';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <LocalCash />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}